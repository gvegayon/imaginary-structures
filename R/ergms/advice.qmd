---
format: html
title: ERGM models for CSS data
---

```{r}
#| label: setup
#| warning: false
#| message: false
library(sna)
library(ergm)
library(netplot)
```

```{r}
#| label: data
# Loading the data
load("data/replication1.RData")
rm(list = ls(pattern = "[^mix]$")) # Keeping only mix
```

# Hightech data

```{r}
#| label: high-summary-stats
gridExtra::grid.arrange(
  nplot(high_ad.mix, bg.col = "lightgray") ,
  nplot(high_fr.mix, vertex.color = "white", bg.col = "black"), nrow = 1
)
```

```{r}
control_mcmc <- control.ergm(
  seed = 112,
  MCMC.samplesize = 1024 * 4, # Twice the  default
  MCMC.interval = 1024 * 2, # Eight times 
  parallel = 4 # Four chains
)

# Baseline model
ans_high_ad.mix00 <- ergm(
  high_ad.mix ~ edges + mutual
)

summary(ans_high_ad.mix00)

# Model with idegree distribution
ans_high_ad.mix01 <- ergm(
  high_ad.mix ~ edges + mutual + gwidegree(0.1, fixed = TRUE),
  control = control_mcmc)

summary(ans_high_ad.mix01)
(gof_high_ad.mix01 <- gof(ans_high_ad.mix01))

saveRDS(ans_high_ad.mix01, "data/ergm_high_ad_mix.RDS")
saveRDS(gof_high_ad.mix01, "data/ergm_gof_high_ad_mix.RDS")
```

We now fit the ERGM for the Friendship network.

```{r}
# Baseline model
ans_high_fr.mix00 <- ergm(
  high_fr.mix ~ edges + mutual
)

summary(ans_high_fr.mix00)

# Model with idegree distribution
ans_high_fr.mix01 <- ergm(
  high_fr.mix ~ edges + mutual + gwidegree(0.25, fixed = TRUE),
  control = control_mcmc)

summary(ans_high_fr.mix01)

# Model with odegree distribution 
ans_high_fr.mix02 <- ergm(
  high_fr.mix ~ edges + mutual + gwodegree(0.2, fixed = TRUE),
  control = control_mcmc)

summary(ans_high_fr.mix02) # Not significant

# Model with idegree and isolates
ans_high_fr.mix03 <- ergm(
  high_fr.mix ~ edges + mutual + gwidegree(0.1, fixed = TRUE) + isolates,
  control = control_mcmc)

summary(ans_high_fr.mix03) # Not significant

# Model with idegree and odegree
ans_high_fr.mix04 <- ergm(
  high_fr.mix ~ edges + mutual + gwidegree(0.25, fixed = TRUE) + gwodegree(0.1, fixed = TRUE),
  control = control_mcmc)

summary(ans_high_fr.mix04) # Not significant

# Testing with idegree and odegree
ans_high_fr.mix05 <- ergm(
  high_fr.mix ~ edges + mutual + gwidegree(0.25, fixed = TRUE) + gwdsp(.1, fixed = TRUE)
)

summary(ans_high_fr.mix05) # Not significant

# Now with gwesp
ans_high_fr.mix06 <- ergm(
  high_fr.mix ~ edges + mutual + gwidegree(0.25, fixed = TRUE) +
  gwesp(0.05, fixed = TRUE)
)

summary(ans_high_fr.mix06) # Not significant

# Now trying with gwesp alone
ans_high_fr.mix07 <- ergm(
  high_fr.mix ~ edges + mutual + gwesp(0.05, fixed = TRUE) 
)

summary(ans_high_fr.mix07)


gof_high_fr.mix07 <- gof(ans_high_fr.mix07)

# Saving the last model
saveRDS(ans_high_fr.mix07, "data/ergm_high_fr_mix.RDS")
saveRDS(gof_high_fr.mix07, "data/ergm_gof_high_fr_mix.RDS")
  # ,
  # control = control_mcmc)
```


# Ital

```{r}
#| label: ital-summary-stats
gridExtra::grid.arrange(
  nplot(ital_ad.mix, bg.col = "lightgray") ,
  nplot(ital_fr.mix, vertex.color = "white", bg.col = "black"), nrow = 1
)
```

```{r}
# Baseline ergm
```

# paci

```{r}
#| label: paci-summary-stats
gridExtra::grid.arrange(
  nplot(paci_ad.mix, bg.col = "lightgray") ,
  nplot(paci_fr.mix, vertex.color = "white", bg.col = "black"), nrow = 1
)
```

# sili

```{r}
#| label: sili-summary-stats
gridExtra::grid.arrange(
  nplot(sili_ad.mix, bg.col = "lightgray") ,
  nplot(sili_fr.mix, vertex.color = "white", bg.col = "black"), nrow = 1
)
```


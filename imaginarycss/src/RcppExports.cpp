// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// new_barry_graph
SEXP new_barry_graph(int n, std::vector< unsigned int > source, std::vector< unsigned int > target, int netsize, std::vector< unsigned int > endpoints);
RcppExport SEXP _imaginarycss_new_barry_graph(SEXP nSEXP, SEXP sourceSEXP, SEXP targetSEXP, SEXP netsizeSEXP, SEXP endpointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector< unsigned int > >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< std::vector< unsigned int > >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type netsize(netsizeSEXP);
    Rcpp::traits::input_parameter< std::vector< unsigned int > >::type endpoints(endpointsSEXP);
    rcpp_result_gen = Rcpp::wrap(new_barry_graph(n, source, target, netsize, endpoints));
    return rcpp_result_gen;
END_RCPP
}
// print_barry_graph
int print_barry_graph(SEXP x);
RcppExport SEXP _imaginarycss_print_barry_graph(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(print_barry_graph(x));
    return rcpp_result_gen;
END_RCPP
}
// count_recip_errors
DataFrame count_recip_errors(SEXP x);
RcppExport SEXP _imaginarycss_count_recip_errors(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_recip_errors(x));
    return rcpp_result_gen;
END_RCPP
}
// count_imaginary_census
DataFrame count_imaginary_census(SEXP x);
RcppExport SEXP _imaginarycss_count_imaginary_census(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_imaginary_census(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_imaginarycss_new_barry_graph", (DL_FUNC) &_imaginarycss_new_barry_graph, 5},
    {"_imaginarycss_print_barry_graph", (DL_FUNC) &_imaginarycss_print_barry_graph, 1},
    {"_imaginarycss_count_recip_errors", (DL_FUNC) &_imaginarycss_count_recip_errors, 1},
    {"_imaginarycss_count_imaginary_census", (DL_FUNC) &_imaginarycss_count_imaginary_census, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_imaginarycss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

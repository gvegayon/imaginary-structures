[{"path":"/articles/intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"imaginarycss package provides tools analyzing Cognitive Social Structures (CSS), focusing discrepancies actual social networks individuals’ perceptions networks. package particularly useful understanding people perceive social relationships systematic errors make social cognition.","code":""},{"path":"/articles/intro.html","id":"what-are-cognitive-social-structures","dir":"Articles","previous_headings":"Introduction","what":"What are Cognitive Social Structures?","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Cognitive Social Structures (CSS) represent individuals perceive entire social network around , just relationships. Think way: traditional network analysis asks “connected ?”, CSS analysis asks “thinks connected ?”","code":""},{"path":"/articles/intro.html","id":"the-core-concept","dir":"Articles","previous_headings":"Introduction > What are Cognitive Social Structures?","what":"The Core Concept","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Imagine work office 10 people. understanding talks , collaborates , friends. perception might different reality, certainly different colleagues perceive. CSS captures multiple, potentially conflicting views social reality.","code":""},{"path":"/articles/intro.html","id":"why-this-matters","dir":"Articles","previous_headings":"Introduction > What are Cognitive Social Structures?","what":"Why This Matters","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Understanding perceptual differences social networks crucial : Decision Making: People base social strategies perceptions, reality Information Flow: Misperceptions can block redirect information paths Organizational Dynamics: Leadership effectiveness often depends accurate social perception Social Psychology: Systematic biases reveal fundamental cognitive processes","code":""},{"path":"/articles/intro.html","id":"types-of-perceptual-errors","dir":"Articles","previous_headings":"Introduction > What are Cognitive Social Structures?","what":"Types of Perceptual Errors","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"compare perceived networks actual networks, several types errors emerge: False Positives: Seeing connections don’t exist (“imaginary ties”) False Negatives: Missing connections exist (“invisible ties”) Reciprocity Errors: Misperceiving whether relationships mutual Asymmetric Biases: Systematically - -estimating certain types relationships compare perceptions actual network structure, can identify various types perceptual errors reveal important insights social cognition.","code":""},{"path":"/articles/intro.html","id":"key-features","dir":"Articles","previous_headings":"Introduction","what":"Key Features","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Network Construction: Create binary array graphs matrices lists adjacency matrices Error Analysis: Compute various types perceptual errors including reciprocity errors imaginary census Null Models: Generate null distributions testing prevalence imaginary structures Tie-Level Accuracy: Analyze individual-level accuracy rates perceiving ties non-ties Network Sampling: Sample perceived networks based individual accuracy rates Let’s start loading package:","code":"library(imaginarycss) library(ggplot2) library(dplyr) library(viridis)  # Set a beautiful theme for all plots theme_set(theme_minimal(base_size = 12) +   theme(     plot.title = element_text(size = 16, face = \"bold\", color = \"#2c3e50\"),     plot.subtitle = element_text(size = 12, color = \"#7f8c8d\"),     axis.title = element_text(size = 11, color = \"#34495e\"),     panel.grid.minor = element_blank(),     panel.grid.major = element_line(color = \"#ecf0f1\", size = 0.5),     legend.title = element_text(size = 10, face = \"bold\"),     plot.background = element_rect(fill = \"#ffffff\", color = NA),     panel.background = element_rect(fill = \"#ffffff\", color = NA)   ))  # Define a beautiful color palette css_colors <- c(   primary = \"#3498db\",   secondary = \"#e74c3c\",    accent = \"#9b59b6\",   success = \"#27ae60\",   warning = \"#f39c12\",   info = \"#17a2b8\",   light = \"#95a5a6\",   dark = \"#2c3e50\" )"},{"path":[]},{"path":"/articles/intro.html","id":"creating-a-barry-graph","dir":"Articles","previous_headings":"Basic Usage","what":"Creating a Barry Graph","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"fundamental data structure imaginarycss barry_graph object, represents collection networks first network “true” network subsequent networks represent different individuals’ perceptions.","code":""},{"path":"/articles/intro.html","id":"understanding-the-data-structure","dir":"Articles","previous_headings":"Basic Usage > Creating a Barry Graph","what":"Understanding the Data Structure","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"barry_graph object essentially “stack” adjacency matrices: - Layer 0: actual/true network (ground truth) - Layer 1: Person 1’s perception entire network - Layer 2: Person 2’s perception entire network - Layer N: Person N’s perception entire network structure allows us compare person thinks network looks like reality ’s perceptions.","code":""},{"path":"/articles/intro.html","id":"why-barry-graph","dir":"Articles","previous_headings":"Basic Usage > Creating a Barry Graph","what":"Why “Barry Graph”?","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"name comes underlying C++ library efficiently handles binary array operations multiple network layers simultaneously. allows fast computation complex network comparisons slow traditional matrix operations.","code":""},{"path":"/articles/intro.html","id":"example-1-simple-network-from-matrix","dir":"Articles","previous_headings":"Basic Usage > Creating a Barry Graph","what":"Example 1: Simple Network from Matrix","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Let’s create simple example 4-node network: ’s happening ? True Network: define 4-person network edges (1→2, 2→1, 3→4, 1→4) Perceived Network: create one person’s perception taking true edges shifting indices network size (4) Combined Matrix: 8×8 matrix contains networks stacked together Barry Graph: new_barry_graph() function recognizes structure creates specialized object key insight person’s perception (edges 2→1, 3→4, 1→4 shifted positions 6→5, 7→8, 5→8) represents one individual thinks network looks like - may differ reality.","code":"# Define edges for the true network and one perceived network source_ <- c(1, 2, 3, 1)  target_ <- c(2, 1, 4, 4)  # Add perceived network (shifted by network size) source_ <- c(source_, source_[-1] + 4) target_ <- c(target_, target_[-1] + 4)  # Create adjacency matrix adjmat <- matrix(0L, nrow = 8, ncol = 8) adjmat[cbind(source_, target_)] <- 1L  # Create barry_graph object graph <- new_barry_graph(adjmat, n = 4) print(graph) #> A barry_graph with 2 networks of size 4 #> .    .  1.00     .  1.00     .     .     .     .  #>  1.00     .     .     .     .     .     .     .  #>     .     .     .  1.00     .     .     .     .  #>     .     .     .     .     .     .     .     .  #>     .     .     .     .     .     .     .  1.00  #>     .     .     .     .  1.00     .     .     .  #>     .     .     .     .     .     .     .  1.00  #>     .     .     .     .     .     .     .     ."},{"path":"/articles/intro.html","id":"example-2-network-from-list-of-matrices","dir":"Articles","previous_headings":"Basic Usage > Creating a Barry Graph","what":"Example 2: Network from List of Matrices","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Alternatively, can create barry_graph list adjacency matrices: Understanding Perceptual Differences: True Network: regular pattern 6 edges Person 1’s Perception: Sees 8 edges (33% reality) - person “densification bias” Person 2’s Perception: Sees 4 edges (33% fewer reality) - person “sparsification bias” different perceptions arise various factors: - Position network: Central people might see connections - Personality traits: Extroverts might perceive social activity - Attention patterns: people notice strong ties, others notice weak signals - Social desirability: People might report think exist","code":"# True network (4x4) true_net <- matrix(c(   0, 1, 0, 1,   1, 0, 1, 0,   0, 1, 0, 1,   1, 0, 1, 0 ), nrow = 4, byrow = TRUE)  # Perceived network by individual 1 perceived_net1 <- matrix(c(   0, 1, 1, 1,  # Person 1 thinks there are more connections   1, 0, 1, 0,   1, 1, 0, 1,   1, 0, 1, 0 ), nrow = 4, byrow = TRUE)  # Perceived network by individual 2 perceived_net2 <- matrix(c(   0, 1, 0, 0,  # Person 2 thinks there are fewer connections   1, 0, 0, 0,   0, 0, 0, 1,   0, 0, 1, 0 ), nrow = 4, byrow = TRUE)  # Create barry_graph from list net_list <- list(true_net, perceived_net1, perceived_net2) graph_from_list <- new_barry_graph(net_list) print(graph_from_list) #> A barry_graph with 3 networks of size 4 #> .    .  1.00     .  1.00     .     .     .     .     .     .  #>  1.00     .  1.00     .     .     .     .     .     .     .  #>     .  1.00     .  1.00     .     .     .     .     .     .  #>  1.00     .  1.00     .     .     .     .     .     .     .  #>     .     .     .     .     .  1.00  1.00  1.00     .     .  #>     .     .     .     .  1.00     .  1.00     .     .     .  #>     .     .     .     .  1.00  1.00     .  1.00     .     .  #>     .     .     .     .  1.00     .  1.00     .     .     .  #>     .     .     .     .     .     .     .     .     .  1.00  #>     .     .     .     .     .     .     .     .  1.00     .  #> Skipping 2 rows. Skipping 2 columns."},{"path":"/articles/intro.html","id":"key-attributes","dir":"Articles","previous_headings":"Basic Usage","what":"Key Attributes","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Every barry_graph object important attributes:","code":"# Network size (number of nodes) cat(\"Network size:\", attr(graph, \"netsize\"), \"\\n\") #> Network size: 4  # Endpoints (boundaries between networks in the combined structure) cat(\"Endpoints:\", attr(graph, \"endpoints\"), \"\\n\") #> Endpoints: 8  # Convert to edgelist for inspection edgelist <- barray_to_edgelist(graph) head(edgelist) #>      source target #> [1,]      1      2 #> [2,]      1      4 #> [3,]      2      1 #> [4,]      3      4 #> [5,]      5      8 #> [6,]      6      5"},{"path":"/articles/intro.html","id":"analyzing-perceptual-errors","dir":"Articles","previous_headings":"","what":"Analyzing Perceptual Errors","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Understanding people misperceive social networks heart CSS analysis. imaginarycss package provides several sophisticated measures quantify different types perceptual errors.","code":""},{"path":"/articles/intro.html","id":"reciprocity-errors","dir":"Articles","previous_headings":"Analyzing Perceptual Errors","what":"Reciprocity Errors","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Reciprocity - whether relationships mutual - fundamental property social networks. person says ’re friends person B, feeling mutual? Reciprocity errors occur individuals misperceive reciprocal nature relationships.","code":""},{"path":"/articles/intro.html","id":"types-of-reciprocity-errors","dir":"Articles","previous_headings":"Analyzing Perceptual Errors > Reciprocity Errors","what":"Types of Reciprocity Errors","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Assumed Reciprocity: Thinking one-way relationship mutual Missed Reciprocity: Thinking mutual relationship one-way False Asymmetry: Seeing asymmetry ’s actually reciprocity False Symmetry: Seeing reciprocity ’s actually asymmetry","code":""},{"path":"/articles/intro.html","id":"why-reciprocity-matters","dir":"Articles","previous_headings":"Analyzing Perceptual Errors > Reciprocity Errors","what":"Why Reciprocity Matters","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Social Expectations: expect important relationships reciprocal Cognitive Load: ’s easier remember “B friends” “likes B B doesn’t like ” Projection: assume others feel way us ","code":"# Compute reciprocity errors recip_errors <- count_recip_errors(graph) print(recip_errors) #>    id                                    name value #> 1   0    Partially false recip (omission) (0)     1 #> 2   0   Partially false recip (comission) (0)     0 #> 3   0   Completely false recip (omission) (0)     0 #> 4   0  Completely false recip (comission) (0)     0 #> 5   0            Mixed reciprocity errors (0)     0 #> 6   0                  (01) Accurate null (0)     3 #> 7   0  (02) Partial false positive (null) (0)     0 #> 8   0 (03) Complete false positive (null) (0)     0 #> 9   0 (04) Partial false negative (assym) (0)     0 #> 10  0                 (05) Accurate assym (0)     2 #> 11  0                    (06) Mixed assym (0)     0 #> 12  0 (07) Partial false positive (assym) (0)     0 #> 13  0 (08) Complete false negative (full) (0)     0 #> 14  0  (09) Partial false negative (full) (0)     1 #> 15  0                  (10) Accurate full (0)     0  # Visualize the distribution ggplot(recip_errors, aes(x = reorder(name, value), y = value)) +   geom_col(     fill = css_colors[\"primary\"],      alpha = 0.8,     width = 0.7   ) +   geom_text(     aes(label = value),      hjust = -0.2,      color = css_colors[\"dark\"],     size = 3.5,     fontface = \"bold\"   ) +   coord_flip() +   scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +   labs(     title = \"🔄 Reciprocity Errors by Type\",     subtitle = \"Understanding how people misperceive mutual relationships\",     x = \"Error Type\",     y = \"Count\",     caption = \"Higher values indicate more frequent misperceptions\"   ) +   theme(     axis.text.y = element_text(size = 10),     plot.title = element_text(color = css_colors[\"primary\"])   )"},{"path":"/articles/intro.html","id":"imaginary-census","dir":"Articles","previous_headings":"Analyzing Perceptual Errors","what":"Imaginary Census","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"imaginary census provides comprehensive classification possible perceptual errors. Think “taxonomy mistakes” - every possible way someone can misperceive dyadic relationship gets category.","code":""},{"path":"/articles/intro.html","id":"the-10-categories-explained","dir":"Articles","previous_headings":"Analyzing Perceptual Errors > Imaginary Census","what":"The 10 Categories Explained","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"census classifies every dyad (pair people) based : 1. actually exists (null, asymmetric, reciprocal tie) 2. perceiver thinks exists (null, asymmetric, reciprocal tie) creates 3×3 matrix possibilities, combinations subdivided:","code":""},{"path":"/articles/intro.html","id":"null-dyads-no-actual-connection","dir":"Articles","previous_headings":"Analyzing Perceptual Errors > Imaginary Census > The 10 Categories Explained","what":"Null Dyads (no actual connection):","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"(01) Accurate Null: Correctly perceives connection (02) Partial False Positive: Sees one-way connection none exists (03) Complete False Positive: Sees mutual connection none exists","code":""},{"path":"/articles/intro.html","id":"asymmetric-dyads-one-way-connection","dir":"Articles","previous_headings":"Analyzing Perceptual Errors > Imaginary Census > The 10 Categories Explained","what":"Asymmetric Dyads (one-way connection):","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"(04) Partial False Negative: Misses connection entirely (05) Accurate Asymmetric: Correctly sees one-way connection (06) Mixed Asymmetric: Sees connection gets direction wrong (07) Partial False Positive: Sees mutual connection one-way exists","code":""},{"path":"/articles/intro.html","id":"reciprocal-dyads-mutual-connection","dir":"Articles","previous_headings":"Analyzing Perceptual Errors > Imaginary Census > The 10 Categories Explained","what":"Reciprocal Dyads (mutual connection):","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"(08) Complete False Negative: Misses connection entirely (09) Partial False Negative: Sees one direction mutual tie (10) Accurate Reciprocal: Correctly perceives mutual connection","code":""},{"path":"/articles/intro.html","id":"cognitive-implications","dir":"Articles","previous_headings":"Analyzing Perceptual Errors > Imaginary Census","what":"Cognitive Implications","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Different error patterns suggest different underlying cognitive processes: - High false positives: “Rose-colored glasses” - seeing connections everywhere - High false negatives: “Tunnel vision” - missing connections exist - Direction errors: Difficulty asymmetric relationships - Reciprocity bias: Tendency assume relationships mutual","code":"# Compute full imaginary census census <- count_imaginary_census(graph) print(census) #>    id                                    name value #> 1   0                  (01) Accurate null (0)     3 #> 2   0  (02) Partial false positive (null) (0)     0 #> 3   0 (03) Complete false positive (null) (0)     0 #> 4   0 (04) Partial false negative (assym) (0)     0 #> 5   0                 (05) Accurate assym (0)     2 #> 6   0                    (06) Mixed assym (0)     0 #> 7   0 (07) Partial false positive (assym) (0)     0 #> 8   0 (08) Complete false negative (full) (0)     0 #> 9   0  (09) Partial false negative (full) (0)     1 #> 10  0                  (10) Accurate full (0)     0  # Clean up names for better visualization # Convert to regular data frame to avoid class conflicts census_df <- census[, names(census)]  # Strip custom class class(census_df) <- \"data.frame\"  census_df$name_clean <- gsub(\"\\\\([0-9]+\\\\)$\", \"\", census_df$name) census_summary <- census_df %>%   filter(grepl(\"^\\\\([0-9]\", name)) %>%   mutate(     error_type = case_when(       grepl(\"Accurate null\", name_clean) ~ \"Accurate Null\",       grepl(\"Partial false positive \\\\(null\\\\)\", name_clean) ~ \"Partial FP (Null)\",       grepl(\"Complete false positive \\\\(null\\\\)\", name_clean) ~ \"Complete FP (Null)\",       grepl(\"Partial false negative \\\\(assym\\\\)\", name_clean) ~ \"Partial FN (Asymm)\",       grepl(\"Accurate assym\", name_clean) ~ \"Accurate Asymm\",       grepl(\"Mixed assym\", name_clean) ~ \"Mixed Asymm\",       grepl(\"Partial false positive \\\\(assym\\\\)\", name_clean) ~ \"Partial FP (Asymm)\",       grepl(\"Complete false negative \\\\(full\\\\)\", name_clean) ~ \"Complete FN (Full)\",       grepl(\"Partial false negative \\\\(full\\\\)\", name_clean) ~ \"Partial FN (Full)\",       grepl(\"Accurate full\", name_clean) ~ \"Accurate Full\",       TRUE ~ \"Other\"     )   )  # Create a beautiful color palette for error types error_colors <- c(   \"Accurate Null\" = \"#27ae60\",           # Green for accurate   \"Accurate Asymm\" = \"#2ecc71\",          # Light green   \"Accurate Full\" = \"#16a085\",           # Teal   \"Partial FP (Null)\" = \"#f39c12\",       # Orange for mild errors   \"Partial FN (Asymm)\" = \"#e67e22\",      # Dark orange   \"Partial FN (Full)\" = \"#d35400\",       # Red-orange   \"Complete FP (Null)\" = \"#e74c3c\",      # Red for serious errors   \"Complete FN (Full)\" = \"#c0392b\",      # Dark red   \"Partial FP (Asymm)\" = \"#8e44ad\",      # Purple   \"Mixed Asymm\" = \"#9b59b6\",             # Light purple   \"Other\" = \"#95a5a6\"                    # Gray for other )  # Visualize error distribution ggplot(census_summary, aes(x = reorder(error_type, value), y = value)) +   geom_col(aes(fill = error_type), alpha = 0.9, width = 0.8) +   geom_text(     aes(label = ifelse(value > 0, value, \"\")),      hjust = -0.1,      color = \"#2c3e50\",     size = 3.2,     fontface = \"bold\"   ) +   scale_fill_manual(values = error_colors) +   coord_flip() +   scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +   labs(     title = \"🎯 Distribution of Perceptual Errors\",     subtitle = \"Comprehensive taxonomy of social perception mistakes\",     x = \"Error Type\",     y = \"Count\",     caption = \"Green = Accurate perceptions, Orange/Red = False positives/negatives, Purple = Mixed errors\"   ) +   guides(fill = \"none\") +   theme(     axis.text.y = element_text(size = 9),     plot.title = element_text(color = css_colors[\"accent\"])   )"},{"path":"/articles/intro.html","id":"analyzing-individual-accuracy","dir":"Articles","previous_headings":"","what":"Analyzing Individual Accuracy","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Individual differences social perception often interesting aggregate patterns. people “social radar” - exceptionally good reading social networks. Others “social blind spots” - systematically missing important patterns.","code":""},{"path":"/articles/intro.html","id":"tie-level-accuracy","dir":"Articles","previous_headings":"Analyzing Individual Accuracy","what":"Tie-Level Accuracy","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"analysis breaks accuracy four key measures, distinguishing different types relationships different types correct judgments.","code":""},{"path":"/articles/intro.html","id":"the-four-accuracy-measures","dir":"Articles","previous_headings":"Analyzing Individual Accuracy > Tie-Level Accuracy","what":"The Four Accuracy Measures","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"“correctly know ’m connected ” High scores suggest good self-awareness “correctly know ’m connected ” High scores suggest realistic self-assessment “correctly know else connected” High scores suggest good social observation skills “correctly know else connected” High scores suggest avoiding false gossip/assumptions","code":""},{"path":"/articles/intro.html","id":"why-this-decomposition-matters","dir":"Articles","previous_headings":"Analyzing Individual Accuracy > Tie-Level Accuracy","what":"Why This Decomposition Matters","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Ego vs. Alter Accuracy: - People typically accurate relationships (ego) others’ relationships (alter) - individuals better “social observers” excel alter accuracy - ratio can reveal whether someone self-focused vs. socially aware True Positive vs. True Negative Accuracy: - True positive accuracy: “good spotting connections?” - True negative accuracy: “good recognizing ’s connection?” - Different cognitive processes may underlie two abilities Understanding individual differences perception accuracy crucial:","code":"# Compute tie-level accuracy for each individual accuracy <- tie_level_accuracy(graph) print(accuracy) #>   k p_0_ego   p_1_ego p_0_alter p_1_alter #> 1 1       1 0.3333333         1         0  # Reshape data for visualization # Convert to regular data frame first to avoid class conflicts accuracy_df <- accuracy[, names(accuracy)]  # Strip custom class class(accuracy_df) <- \"data.frame\"  accuracy_long <- accuracy_df %>%   select(-k) %>%   tidyr::pivot_longer(     everything(),     names_to = \"measure\",     values_to = \"probability\"   ) %>%   mutate(     measure_clean = case_when(       measure == \"p_0_ego\" ~ \"True Negative (Ego)\",       measure == \"p_1_ego\" ~ \"True Positive (Ego)\",        measure == \"p_0_alter\" ~ \"True Negative (Alter)\",       measure == \"p_1_alter\" ~ \"True Positive (Alter)\"     )   )  # Create color palette for accuracy measures accuracy_colors <- c(   \"True Negative (Ego)\" = \"#3498db\",     # Blue   \"True Positive (Ego)\" = \"#2980b9\",     # Dark blue     \"True Negative (Alter)\" = \"#e74c3c\",   # Red   \"True Positive (Alter)\" = \"#c0392b\"    # Dark red )  # Visualize accuracy measures p1 <- ggplot(accuracy_long, aes(x = measure_clean, y = probability)) +   geom_violin(     aes(fill = measure_clean),     alpha = 0.7,     trim = FALSE,     scale = \"width\"   ) +   geom_boxplot(     width = 0.2,     alpha = 0.8,     outlier.alpha = 0.6,     outlier.size = 1.5   ) +   geom_jitter(     width = 0.15,      alpha = 0.6,      size = 2,     color = \"#2c3e50\"   ) +   scale_fill_manual(values = accuracy_colors) +   scale_y_continuous(labels = scales::percent_format()) +   labs(     title = \"🎯 Individual-Level Accuracy Rates\",     subtitle = \"How well do people perceive different types of relationships?\",     x = \"Accuracy Measure\",     y = \"Accuracy Rate (%)\",     caption = \"Blue = Ego relationships (involving self), Red = Alter relationships (between others)\"   ) +   guides(fill = \"none\") +   theme(     axis.text.x = element_text(angle = 30, hjust = 1, size = 10),     plot.title = element_text(color = css_colors[\"info\"]),     panel.grid.major.x = element_blank()   )  print(p1)"},{"path":"/articles/intro.html","id":"generating-null-models","dir":"Articles","previous_headings":"","what":"Generating Null Models","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Statistical testing network analysis requires careful null models. can’t just use random networks individual perceptual biases aren’t random - ’re systematic person-specific.","code":""},{"path":"/articles/intro.html","id":"the-challenge-of-network-null-models","dir":"Articles","previous_headings":"Generating Null Models","what":"The Challenge of Network Null Models","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Traditional approaches might use: - Random networks: real perception isn’t random - Erdős-Rényi models: ignore individual differences - Configuration models: don’t capture perceptual biases","code":""},{"path":"/articles/intro.html","id":"our-solution-accuracy-based-sampling","dir":"Articles","previous_headings":"Generating Null Models > The Challenge of Network Null Models","what":"Our Solution: Accuracy-Based Sampling","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"imaginarycss approach uses individual accuracy rates generate realistic null distributions: Measure person’s accuracy different types relationships Use rates probabilities generating simulated perceptions Preserve individual differences randomizing specific errors Generate many samples build null distributions approach asks: “someone X% accuracy rate ego ties Y% accuracy alter ties, range error patterns expect chance?”","code":""},{"path":"/articles/intro.html","id":"sampling-perceived-networks","dir":"Articles","previous_headings":"Generating Null Models","what":"Sampling Perceived Networks","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"sampling process works follows: Start true network baseline ’s ego tie: Use ego accuracy rate ’s alter tie: Use alter accuracy rate exist: Use true positive rate probability shouldn’t exist: Use true negative rate probability Generate binary outcome based probabilities Repeat many times create distribution","code":"# Sample a single network based on accuracy rates set.seed(123) sampled_networks <- sample_css_network(graph, keep_baseline = TRUE)  cat(\"Number of sampled networks:\", length(sampled_networks), \"\\n\") #> Number of sampled networks: 2 cat(\"Dimensions of each network:\", dim(sampled_networks[[1]]), \"\\n\") #> Dimensions of each network: 4 4  # Compare original vs sampled network density original_density <- sum(sampled_networks[[1]]) / (4 * 3)  # exclude diagonal sampled_density <- sum(sampled_networks[[2]]) / (4 * 3)  cat(\"Original network density:\", round(original_density, 3), \"\\n\") #> Original network density: 0.333 cat(\"Sampled network density:\", round(sampled_density, 3), \"\\n\") #> Sampled network density: 0"},{"path":"/articles/intro.html","id":"generating-multiple-samples-for-statistical-testing","dir":"Articles","previous_headings":"Generating Null Models","what":"Generating Multiple Samples for Statistical Testing","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"power null models comes generating many samples understand distribution outcomes ’d expect chance alone.","code":""},{"path":"/articles/intro.html","id":"the-statistical-logic","dir":"Articles","previous_headings":"Generating Null Models > Generating Multiple Samples for Statistical Testing","what":"The Statistical Logic","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Observed Pattern: see X false positives data Null Hypothesis: just ’d expect given individual accuracy rates Null Distribution: Generate 1000+ samples using accuracy rates probabilities P-value: proportion null samples ≥ X false positives? Interpretation: p < 0.05, observed pattern unlikely due chance","code":""},{"path":"/articles/intro.html","id":"why-this-approach-works","dir":"Articles","previous_headings":"Generating Null Models > Generating Multiple Samples for Statistical Testing","what":"Why This Approach Works","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Preserves individual differences: person’s bias level stays realistic Controls network density: Null models similar overall connection rates Accounts position effects: Ego vs. alter accuracy differences maintained Enables fair comparison: specific pattern errors randomized","code":"# Generate multiple samples for null distribution set.seed(456) n_samples <- 100  # Note: For this example, we'll use a simpler approach # since the full null sampling may require additional setup null_samples <- replicate(n_samples, {   sample_css_network(graph, keep_baseline = FALSE) }, simplify = FALSE)  # For demonstration, let's compute a simple metric instead of full census # We'll count the total number of ties in each sampled network null_densities <- sapply(null_samples, function(nets) {   if (length(nets) > 0) {     sum(nets[[1]]) / (4 * 3)  # Network density   } else {     0   } })  # Compare with observed density observed_density <- sum(sampled_networks[[2]]) / (4 * 3)  # Calculate p-value first p_value <- mean(null_densities >= observed_density) cat(\"P-value for network density:\", round(p_value, 4), \"\\n\") #> P-value for network density: 1  # Visualization null_df <- data.frame(   density = null_densities,   type = \"Null Distribution\" )  # Create beautiful density comparison plot density_plot <- ggplot(null_df, aes(x = density)) +   geom_histogram(     bins = 25,      alpha = 0.8,      fill = css_colors[\"primary\"],      color = \"white\",     size = 0.3   ) +   geom_vline(     xintercept = observed_density,      color = css_colors[\"secondary\"],      linetype = \"dashed\",      size = 1.2   ) +   geom_density(     aes(y = after_stat(density) * length(null_densities) * 0.05),     color = css_colors[\"accent\"],     size = 1.5,     alpha = 0.7   ) +   annotate(     \"label\",      x = observed_density + 0.02,      y = Inf,      label = paste(\"Observed\\n\", round(observed_density, 3)),     vjust = 1.2,     hjust = 0,     color = css_colors[\"secondary\"],     fill = \"white\",     size = 3.5,     fontface = \"bold\",     label.padding = unit(0.3, \"lines\")   ) +   scale_x_continuous(labels = scales::percent_format()) +   scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +   labs(     title = \"📊 Null Distribution of Network Density\",     subtitle = \"Comparing observed patterns against chance expectations\",     x = \"Network Density (%)\",     y = \"Frequency\",     caption = paste(\"P-value:\", round(p_value, 4), \"| Based on\", n_samples, \"null samples\")   ) +   theme(     plot.title = element_text(color = css_colors[\"primary\"]),     panel.grid.major.x = element_line(color = \"#ecf0f1\", size = 0.5),     panel.grid.major.y = element_line(color = \"#ecf0f1\", size = 0.5)   )  print(density_plot)"},{"path":"/articles/intro.html","id":"advanced-analysis-counter-types","dir":"Articles","previous_headings":"","what":"Advanced Analysis: Counter Types","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"One sophisticated features imaginarycss ability decompose errors based perceiver’s involvement relationship judged.","code":""},{"path":[]},{"path":"/articles/intro.html","id":"why-this-distinction-matters","dir":"Articles","previous_headings":"Advanced Analysis: Counter Types > The Psychology Behind Ego vs. Alter Perception","what":"Why This Distinction Matters","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Ego-Involved Relationships (perceiver part dyad): - Higher stakes: relationships directly affect perceiver - information: Direct experience vs. observation - Different biases: Self-enhancement, wishful thinking, social desirability - Example: Person judging whether ↔︎B connection exists Alter-Alter Relationships (perceiver observes others): - Lower stakes: relationships don’t directly involve perceiver - Less information: Must rely observation inference - Different biases: Stereotyping, availability heuristic, gossip effects - Example: Person judging whether B↔︎C connection exists","code":""},{"path":"/articles/intro.html","id":"theoretical-predictions","dir":"Articles","previous_headings":"Advanced Analysis: Counter Types > The Psychology Behind Ego vs. Alter Perception","what":"Theoretical Predictions","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Research suggests several patterns: Ego Accuracy Advantage: People accurate relationships Ego Positivity Bias: People might -report connections (social desirability) Alter Projection: People might assume others relationships similar Alter Visibility: alter relationships visible/observable others","code":""},{"path":"/articles/intro.html","id":"separating-ego-vs--alter-perceptions","dir":"Articles","previous_headings":"Advanced Analysis: Counter Types","what":"Separating Ego vs. Alter Perceptions","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"package allows analyze errors separately based whether perceiver involved relationship:","code":"# All ties census_all <- count_imaginary_census(graph, counter_type = 0)  # Only ties involving the perceiver (ego) census_ego <- count_imaginary_census(graph, counter_type = 1)  # Only ties not involving the perceiver (alter-alter) census_alter <- count_imaginary_census(graph, counter_type = 2)  # Verify that ego + alter = all verification <- census_all$value - (census_ego$value + census_alter$value) all_match <- all(verification == 0) cat(\"Ego + Alter counts equal All counts:\", all_match, \"\\n\") #> Ego + Alter counts equal All counts: TRUE  # Compare error patterns # Convert to regular data frame to avoid class conflicts census_all_df <- census_all[, names(census_all)] class(census_all_df) <- \"data.frame\" census_ego_df <- census_ego[, names(census_ego)] class(census_ego_df) <- \"data.frame\" census_alter_df <- census_alter[, names(census_alter)] class(census_alter_df) <- \"data.frame\"  compare_df <- data.frame(   error_type = census_all_df$name,   all_ties = census_all_df$value,   ego_ties = census_ego_df$value,   alter_ties = census_alter_df$value ) %>%   filter(grepl(\"^\\\\([0-9]\", error_type)) %>%   mutate(     ego_proportion = ego_ties / all_ties,     alter_proportion = alter_ties / all_ties   )  # Visualize the comparison compare_long <- compare_df %>%   select(error_type, ego_proportion, alter_proportion) %>%   tidyr::pivot_longer(     cols = c(ego_proportion, alter_proportion),     names_to = \"tie_type\",     values_to = \"proportion\"   ) %>%   mutate(     tie_type = ifelse(tie_type == \"ego_proportion\", \"Ego Involved\", \"Alter-Alter\"),     error_short = substr(error_type, 1, 20)   )  # Create gradient colors for ego vs alter comparison relationship_colors <- c(   \"Ego Involved\" = \"#3498db\",   \"Alter-Alter\" = \"#e74c3c\" )  # Create a more sophisticated comparison plot comparison_plot <- ggplot(compare_long, aes(x = error_short, y = proportion, fill = tie_type)) +   geom_col(     position = position_dodge(width = 0.8),      alpha = 0.9,     width = 0.7   ) +   geom_text(     aes(label = ifelse(proportion > 0.02, scales::percent(proportion, accuracy = 1), \"\")),     position = position_dodge(width = 0.8),     hjust = -0.1,     size = 3,     fontface = \"bold\",     color = \"#2c3e50\"   ) +   scale_fill_manual(     values = relationship_colors,     name = \"Relationship Type\"   ) +   scale_y_continuous(     labels = scales::percent_format(),     expand = expansion(mult = c(0, 0.15))   ) +   coord_flip() +   labs(     title = \"👥 Error Patterns: Ego vs. Alter Relationships\",     subtitle = \"How perception accuracy varies by relationship involvement\",     x = \"Error Type\",     y = \"Proportion of Total Errors\",     caption = \"Blue = Relationships involving the perceiver | Red = Relationships between others\"   ) +   theme(     legend.position = \"bottom\",     legend.title = element_text(size = 11, face = \"bold\"),     legend.text = element_text(size = 10),     axis.text.y = element_text(size = 9),     plot.title = element_text(color = css_colors[\"info\"]),     panel.grid.major.x = element_line(color = \"#ecf0f1\", size = 0.3),     legend.box.background = element_rect(color = \"#bdc3c7\", fill = \"#ffffff\")   ) +   guides(     fill = guide_legend(       title.position = \"top\",       title.hjust = 0.5,       nrow = 1     )   )  print(comparison_plot)"},{"path":"/articles/intro.html","id":"real-world-example-krackhardt-network","dir":"Articles","previous_headings":"","what":"Real-World Example: Krackhardt Network","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Let’s demonstrate package realistic example using organizational network data. Krackhardt advice network classic dataset organizational behavior research.","code":""},{"path":"/articles/intro.html","id":"understanding-organizational-networks","dir":"Articles","previous_headings":"Real-World Example: Krackhardt Network","what":"Understanding Organizational Networks","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Setting: high-tech company researchers measured : - Actual advice relationships: actually seeks advice (observed) - Perceived advice relationships: employee thinks seeks advice Matters: - Information flow: Advice networks determine knowledge spreads - Influence patterns: Perceived networks affect people try influence - Organizational design: Managers need accurate views informal structure - Change management: Interventions target actual vs. perceived bottlenecks","code":""},{"path":"/articles/intro.html","id":"the-cognitive-challenge","dir":"Articles","previous_headings":"Real-World Example: Krackhardt Network","what":"The Cognitive Challenge","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Organizational advice networks present unique perceptual challenges: Visibility: Advice-seeking often happens privately (email, closed-door meetings) Asymmetry: Advice relationships inherently directional often non-reciprocal Status effects: People may misperceive advice patterns based formal hierarchy Wishful thinking: Employees might report advice patterns wish existed","code":"# Note: This assumes you have the Krackhardt advice network data # krack_data <- read.csv(\"data-raw/advice_nets.csv\") # For demonstration, we'll create a simulated version  set.seed(789) n_people <- 10 n_networks <- n_people + 1  # true network + perceptions  # Simulate advice network data create_advice_network <- function(n, density = 0.3) {   adj_mat <- matrix(0, n, n)   n_edges <- floor(n * (n-1) * density)   possible_edges <- which(upper.tri(adj_mat) | lower.tri(adj_mat), arr.ind = TRUE)   selected_edges <- sample(nrow(possible_edges), n_edges)   adj_mat[possible_edges[selected_edges, ]] <- 1   return(adj_mat) }  # Create true network and individual perceptions true_network <- create_advice_network(n_people, 0.25) perceived_networks <- lapply(1:n_people, function(i) {   # Add some noise to perceptions   perceived <- true_network   # Random errors   error_rate <- runif(1, 0.1, 0.3)   n_errors <- floor(n_people * (n_people - 1) * error_rate)   error_positions <- sample(n_people * n_people, n_errors)   perceived[error_positions] <- 1 - perceived[error_positions]   diag(perceived) <- 0  # No self-loops   return(perceived) })  # Combine into barry_graph all_networks <- c(list(true_network), perceived_networks) krack_graph <- new_barry_graph(all_networks) # Analyze the organizational network krack_accuracy <- tie_level_accuracy(krack_graph)  # Summary statistics # Convert to regular data frame first accuracy_df <- krack_accuracy[, names(krack_accuracy)] class(accuracy_df) <- \"data.frame\"  summary_stats <- accuracy_df %>%   select(-k) %>%   summarise(     across(everything(), list(mean = mean, sd = sd), na.rm = TRUE)   )  print(summary_stats)  # Individual differences in accuracy # Individual differences in accuracy with beautiful styling individual_plot <- ggplot(krack_accuracy, aes(x = factor(k))) +   geom_point(     aes(y = p_1_ego, color = \"True Positive (Ego)\"),      size = 3.5,     alpha = 0.8   ) +   geom_point(     aes(y = p_0_ego, color = \"True Negative (Ego)\"),      size = 3.5,     alpha = 0.8   ) +   geom_point(     aes(y = p_1_alter, color = \"True Positive (Alter)\"),      size = 3.5,     alpha = 0.8   ) +   geom_point(     aes(y = p_0_alter, color = \"True Negative (Alter)\"),      size = 3.5,     alpha = 0.8   ) +   geom_smooth(     aes(y = p_1_ego, color = \"True Positive (Ego)\"),     method = \"loess\",     se = FALSE,     size = 1,     alpha = 0.6   ) +   geom_smooth(     aes(y = p_0_ego, color = \"True Negative (Ego)\"),     method = \"loess\",      se = FALSE,     size = 1,     alpha = 0.6   ) +   scale_color_manual(     values = c(       \"True Positive (Ego)\" = \"#2980b9\",       \"True Negative (Ego)\" = \"#3498db\",        \"True Positive (Alter)\" = \"#c0392b\",       \"True Negative (Alter)\" = \"#e74c3c\"     ),     name = \"Accuracy Measure\"   ) +   scale_y_continuous(     labels = scales::percent_format(),     limits = c(0, 1)   ) +   labs(     title = \"🧠 Individual Accuracy Profiles\",     subtitle = \"Person-by-person variation in social perception skills\",     x = \"Individual ID\",     y = \"Accuracy Rate (%)\",     caption = \"Smooth lines show trends across individuals\"   ) +   theme(     legend.position = \"bottom\",     legend.title = element_text(face = \"bold\"),     plot.title = element_text(color = css_colors[\"dark\"]),     panel.grid.minor = element_blank(),     legend.box.background = element_rect(color = \"#bdc3c7\", fill = \"#ffffff\", alpha = 0.8)   ) +   guides(     color = guide_legend(       title.position = \"top\",       title.hjust = 0.5,       nrow = 2,       override.aes = list(size = 4)     )   )  print(individual_plot)  # Network-level analysis krack_census <- count_imaginary_census(krack_graph) krack_recip <- count_recip_errors(krack_graph)  # Performance benchmarking system.time({   sample_css_network(krack_graph) })"},{"path":[]},{"path":[]},{"path":"/articles/intro.html","id":"matrix-requirements","dir":"Articles","previous_headings":"Best Practices and Tips > 1. Data Preparation","what":"Matrix Requirements","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Square matrices: network must n×n n number actors Binary values: Use 0s 1s absent/present ties (integer matrices preferred) Diagonal handling: Set diag(matrix) = 0 unless self-loops meaningful Consistent ordering: Ensure matrices use actor ordering","code":""},{"path":"/articles/intro.html","id":"common-data-issues","dir":"Articles","previous_headings":"Best Practices and Tips > 1. Data Preparation","what":"Common Data Issues","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Missing data: Decide whether exclude actors impute missing perceptions Partial networks: people might report possible ties Multiple relations: Keep different relationship types (friendship, advice, etc.) separate Temporal alignment: Ensure “true” “perceived” networks refer time period","code":""},{"path":[]},{"path":"/articles/intro.html","id":"understanding-error-patterns","dir":"Articles","previous_headings":"Best Practices and Tips > 2. Interpretation Guidelines","what":"Understanding Error Patterns","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"High False Positive Rates suggest: - Wishful thinking social desirability bias - -attribution weak signals meaningful ties - Projection one’s relationship patterns onto others - Poor boundary detection (treating acquaintances friends) High False Negative Rates suggest: - Conservative threshold recognizing relationships - Limited social observation attention - Focus one’s relationships vs. others’ relationships - Underestimation weak tie importance Asymmetric Errors indicate: - Difficulty processing non-reciprocal relationships - Cognitive bias toward assuming mutuality - Status-based misperceptions (assuming high-status people connections) - Projection one’s reciprocity preferences","code":""},{"path":"/articles/intro.html","id":"statistical-significance","dir":"Articles","previous_headings":"Best Practices and Tips > 2. Interpretation Guidelines","what":"Statistical Significance","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Always compare observed patterns appropriate null distributions Account multiple testing examining many error types Consider effect sizes, just p-values (large networks can make tiny effects “significant”) Report confidence intervals around accuracy estimates","code":""},{"path":[]},{"path":"/articles/intro.html","id":"computational-efficiency","dir":"Articles","previous_headings":"Best Practices and Tips > 3. Performance Considerations","what":"Computational Efficiency","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Large networks: Use counter_type parameters focus specific aspects Memory management: barry_graph objects store networks efficiently, large networks still require substantial RAM Parallel processing: multiple null samples, consider parallel execution Caching: Store results expensive computations (tie_level_accuracy, null distributions)","code":""},{"path":"/articles/intro.html","id":"scalability-guidelines","dir":"Articles","previous_headings":"Best Practices and Tips > 3. Performance Considerations","what":"Scalability Guidelines","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Networks < 50 nodes: analyses run quickly Networks 50-200 nodes: Consider focusing analyses, use sampling null models Networks > 200 nodes: Definitely use sampling, consider network partitioning approaches","code":""},{"path":[]},{"path":"/articles/intro.html","id":"effective-plotting-strategies","dir":"Articles","previous_headings":"Best Practices and Tips > 4. Visualization Tips","what":"Effective Plotting Strategies","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Color coding: Use consistent colors across plots error types Error bars: Include confidence intervals accuracy measures Faceting: Separate ego vs. alter effects, different individuals Annotations: Label important patterns outliers directly plots","code":""},{"path":"/articles/intro.html","id":"avoiding-common-mistakes","dir":"Articles","previous_headings":"Best Practices and Tips > 4. Visualization Tips","what":"Avoiding Common Mistakes","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Don’t plot raw counts without considering network size differences Don’t ignore individual variation showing group averages Don’t use pie charts error type distributions (bar charts clearer) Don’t forget explain error type means captions","code":""},{"path":[]},{"path":"/articles/intro.html","id":"data-collection-best-practices","dir":"Articles","previous_headings":"Best Practices and Tips > 5. Study Design Considerations","what":"Data Collection Best Practices","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Clear instructions: Ensure respondents understand relationships report Roster methods: Provide complete lists names rather free recall Multiple informants: Validate “true” networks multiple sources possible Temporal precision: specific time period assessed","code":""},{"path":"/articles/intro.html","id":"validation-approaches","dir":"Articles","previous_headings":"Best Practices and Tips > 5. Study Design Considerations","what":"Validation Approaches","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Inter-rater reliability: possible, compare multiple perceptions network Behavioral validation: Cross-validate perceived networks behavioral indicators Longitudinal stability: Test whether perceptual patterns stable time Cross-network validation: Check people show similar biases across different relationship types","code":""},{"path":"/articles/intro.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"imaginarycss package provides comprehensive toolkit analyzing cognitive social structures understanding systematic errors social perception. field sits intersection network analysis, social psychology, cognitive science, offering insights fundamental questions humans navigate social worlds.","code":""},{"path":[]},{"path":"/articles/intro.html","id":"organizational-research","dir":"Articles","previous_headings":"Conclusion > Key Applications and Research Domains","what":"Organizational Research","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Information flow analysis: Understanding misperceptions block redirect knowledge sharing Leadership assessment: Identifying managers accurately perceive informal networks Team formation: Matching people based complementary social perception skills Change management: Targeting interventions based actual vs. perceived influence patterns","code":""},{"path":"/articles/intro.html","id":"social-psychology","dir":"Articles","previous_headings":"Conclusion > Key Applications and Research Domains","what":"Social Psychology","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Cognitive bias research: Quantifying systematic errors social cognition Individual differences: Understanding people better “social radars” Stereotype prejudice: Analyzing group membership affects social perception Social development: Tracking social perception accuracy changes age/experience","code":""},{"path":"/articles/intro.html","id":"network-analysis-methodology","dir":"Articles","previous_headings":"Conclusion > Key Applications and Research Domains","what":"Network Analysis Methodology","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Validation studies: Assessing accuracy network data collection methods Missing data: Understanding systematic patterns gets “missed” network surveys Multi-perspective networks: Combining multiple viewpoints improve network measurement Dynamic networks: Understanding perceptions lag behind actual network changes","code":""},{"path":"/articles/intro.html","id":"clinical-and-applied-settings","dir":"Articles","previous_headings":"Conclusion > Key Applications and Research Domains","what":"Clinical and Applied Settings","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Social skills assessment: Measuring social perception accuracy clinical indicator Intervention evaluation: Testing whether training improves social perception Group therapy: Understanding members perceive group dynamics Autism research: Quantifying differences social network perception","code":""},{"path":[]},{"path":"/articles/intro.html","id":"cognitive-mechanisms","dir":"Articles","previous_headings":"Conclusion > Theoretical Contributions","what":"Cognitive Mechanisms","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"package’s decomposition errors reveals different underlying cognitive processes: - Attention: social information people notice vs. miss? - Memory: accurately people remember social interactions? - Inference: assumptions people make unobserved relationships? - Projection: people’s experiences bias perceptions?","code":""},{"path":"/articles/intro.html","id":"social-processes","dir":"Articles","previous_headings":"Conclusion > Theoretical Contributions","what":"Social Processes","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"ego vs. alter distinction illuminates different social psychological mechanisms: - Self-enhancement: people -report social connections? - Social desirability: people report relationships think ? - Availability bias: recent salient relationships -weighted? - Status effects: perceptions vary systematically social position?","code":""},{"path":[]},{"path":"/articles/intro.html","id":"null-model-development","dir":"Articles","previous_headings":"Conclusion > Methodological Innovations","what":"Null Model Development","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"accuracy-based sampling approach represents significant methodological advance: - Realistic baselines: Null models preserve individual differences randomizing specific errors - Appropriate controls: Statistical tests account person-specific biases - Flexible framework: Can extended types network perception tasks","code":""},{"path":"/articles/intro.html","id":"error-taxonomy","dir":"Articles","previous_headings":"Conclusion > Methodological Innovations","what":"Error Taxonomy","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"10-category imaginary census provides comprehensive framework: - Theoretical grounding: Categories map onto distinct cognitive social processes - Empirical utility: Different error types correlate different individual situational factors - Cross-study comparison: Standardized categories enable meta-analysis across studies","code":""},{"path":"/articles/intro.html","id":"future-directions","dir":"Articles","previous_headings":"Conclusion","what":"Future Directions","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"package enables several emerging research directions: Multi-layer networks: Extending CSS analysis multiple relationship types simultaneously Dynamic CSS: Analyzing perceptions change time lag behind reality Cultural variation: Comparing CSS patterns across different cultural contexts Machine learning: Using error patterns predict social cognitive outcomes Intervention research: Testing whether training can improve social perception accuracy","code":""},{"path":"/articles/intro.html","id":"implementation-philosophy","dir":"Articles","previous_headings":"Conclusion","what":"Implementation Philosophy","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"package’s strength lies ability decompose complex perceptual patterns interpretable components. Rather simply asking “perceptions accurate?”, asks: - types errors common? - individuals make types errors? - errors vary across different types relationships? - observed error patterns statistically meaningful? granular approach enables researchers identify specific mechanisms develop targeted interventions, rather treating social perception monolithic ability.","code":""},{"path":"/articles/intro.html","id":"final-recommendations","dir":"Articles","previous_headings":"Conclusion","what":"Final Recommendations","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"researchers new CSS analysis: 1. Start simple: Begin small, well-understood networks build intuition 2. Validate carefully: Cross-check “true” networks multiple sources possible 3. Think theoretically: Connect error patterns specific psychological social mechanisms 4. Use null models: Always compare observed patterns appropriate baselines 5. Report comprehensively: Include individual differences alongside group-level patterns field cognitive social structures rapidly evolving, imaginarycss package provides computational tools needed advance theoretical understanding practical applications. information updates, visit package repository documentation. information updates, visit package repository documentation.","code":""},{"path":"/articles/intro.html","id":"references","dir":"Articles","previous_headings":"Conclusion","what":"References","title":"Introduction to imaginarycss: Analyzing Cognitive Social Structures","text":"Krackhardt, D. (1987). Cognitive social structures. Social Networks, 9(2), 109-134. Vega Yon, G. G., & Demarais, . (2022). Exponential random graph models little networks. Social Networks, 70, 181-195. vignette created imaginarycss version 0.0.9000.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"George Vega Yon. Author, maintainer. Kyosuke Tanaka. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vega Yon G, Tanaka K (2025). imaginarycss: Imaginary CSS Structures. R package version 0.0-9000.","code":"@Manual{,   title = {imaginarycss: Imaginary CSS Structures},   author = {George {Vega Yon} and Kyosuke Tanaka},   year = {2025},   note = {R package version 0.0-9000}, }"},{"path":"/index.html","id":"imaginarycss","dir":"","previous_headings":"","what":"Imaginary CSS Structures","title":"Imaginary CSS Structures","text":"goal imaginarycss …","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Imaginary CSS Structures","text":"can install released version imaginarycss CRAN : development version GitHub :","code":"install.packages(\"imaginarycss\") # install.packages(\"devtools\") devtools::install_github(\"gvegayon/imaginary-structures\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Imaginary CSS Structures","text":"basic example shows solve common problem: Another example passing list Now checking none coincide completely Checking distribution  Checking tie level accuracy","code":"library(imaginarycss)  source_ <- c(1, 2, 3, 1)  target_ <- c(2, 1, 4, 4)  source_ <- c(source_, source_[-1] + 4) target_ <- c(target_, target_[-1] + 4)  adjmat <- matrix(0L, nrow = 8, ncol = 8) adjmat[cbind(source_, target_)] <- 1L  graph <- new_barry_graph(adjmat, n = 4) graph #> A barry_graph with 2 networks of size 4 #> .    .  1.00     .  1.00     .     .     .     .  #>  1.00     .     .     .     .     .     .     .  #>     .     .     .  1.00     .     .     .     .  #>     .     .     .     .     .     .     .     .  #>     .     .     .     .     .     .     .  1.00  #>     .     .     .     .  1.00     .     .     .  #>     .     .     .     .     .     .     .  1.00  #>     .     .     .     .     .     .     .     .  # These are two attributes that are part of the barry_graph object attr(graph, \"endpoints\") #> [1] 8 attr(graph, \"netsize\") #> [1] 4  count_recip_errors(graph) #>    id                                    name value #> 1   0    Partially false recip (omission) (0)     1 #> 2   0   Partially false recip (comission) (0)     0 #> 3   0   Completely false recip (omission) (0)     0 #> 4   0  Completely false recip (comission) (0)     0 #> 5   0            Mixed reciprocity errors (0)     0 #> 6   0                  (01) Accurate null (0)     3 #> 7   0  (02) Partial false positive (null) (0)     0 #> 8   0 (03) Complete false positive (null) (0)     0 #> 9   0 (04) Partial false negative (assym) (0)     0 #> 10  0                 (05) Accurate assym (0)     2 #> 11  0                    (06) Mixed assym (0)     0 #> 12  0 (07) Partial false positive (assym) (0)     0 #> 13  0 (08) Complete false negative (full) (0)     0 #> 14  0  (09) Partial false negative (full) (0)     1 #> 15  0                  (10) Accurate full (0)     0 krack_data <- read.csv(\"data-raw/advice_nets.csv\") krack_data <- as.matrix(krack_data) n          <- 21  krack_adjmat <- matrix(0L, nrow = n * 22, ncol = n * 22) krack_adjmat[krack_data] <- 1L  graph <- new_barry_graph(   krack_adjmat,   n = n   )  ans <- count_recip_errors(graph) head(ans) #>   id                                 name value #> 1  0 Partially false recip (omission) (0)    25 #> 2  1 Partially false recip (omission) (1)    78 #> 3  2 Partially false recip (omission) (2)    52 #> 4  3 Partially false recip (omission) (3)    63 #> 5  4 Partially false recip (omission) (4)    56 #> 6  5 Partially false recip (omission) (5)    56 library(network) #>  #> 'network' 1.18.1 (2023-01-24), part of the Statnet Project #> * 'news(package=\"network\")' for changes since last version #> * 'citation(\"network\")' for citation information #> * 'https://statnet.org' for help, support, and other information library(ergmito) knet <- as.network(krack_adjmat) knet %v% \"id\" <- rep(0:n, each = n)  netlist <- splitnetwork(knet, \"id\") netlist <- lapply(netlist, as.matrix)  graph2 <- new_barry_graph(netlist)  all(barray_to_edgelist(graph2) ==   barray_to_edgelist(graph)) #> [1] TRUE # Removing the network id ans$name <- gsub(\"\\\\([0-9]+\\\\)$\", \"\", ans$name) library(ggplot2)  # keeping the onces from the census only ans <- subset(ans, grepl(\"^\\\\([0-9]\", name))  ggplot(data = ans, aes(y = value)) +   geom_histogram() +    facet_wrap(vars(name)) +   coord_flip() +   labs(title = \"Distribution of type of errors\") #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. taccuracy <- tie_level_accuracy(graph) boxplot(   taccuracy[,-1],   main = \"Individual level true positive and true negative rates\",   ylab = \"Probability\"   )# Keeping only the ones from the census # Sampling and using that to generate a new barray graph graph_sampled <- new_barry_graph(   sample_css_network(graph) )  microbenchmark::microbenchmark(   sample_css_network(graph)   ) #> Unit: milliseconds #>                       expr      min       lq     mean   median       uq #>  sample_css_network(graph) 11.25291 11.65259 14.32988 12.15657 16.58535 #>       max neval #>  32.85994   100  # Retrieving 1000 samples set.seed(331) samp <- replicate(n = 100, sample_css_network(graph), simplify = FALSE) census <- lapply(samp, \\(net) {   count_imaginary_census(new_barry_graph(net)) })"},{"path":"/index.html","id":"self-perception","dir":"","previous_headings":"","what":"Self perception","title":"Imaginary CSS Structures","text":"can also separate counts function whether perceiver looking ties, ties including , ties including .","code":"census_all            <- count_imaginary_census(graph, counter_type = 0) census_perceiver_only <- count_imaginary_census(graph, counter_type = 1) census_no_perceiver   <- count_imaginary_census(graph, counter_type = 2)  # Should be zero which_not <- census_all$value -   (census_perceiver_only$value + census_no_perceiver$value)  length(census_all$name[which(which_not != 0)]) == 0L #> [1] TRUE"},{"path":"/reference/barray_to_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the edgelist of a barry_graph — barray_to_edgelist","title":"Retrieves the edgelist of a barry_graph — barray_to_edgelist","text":"Retrieves edgelist barry_graph","code":""},{"path":"/reference/barray_to_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the edgelist of a barry_graph — barray_to_edgelist","text":"","code":"barray_to_edgelist(x)"},{"path":"/reference/barray_to_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the edgelist of a barry_graph — barray_to_edgelist","text":"x object class barry_graph.","code":""},{"path":"/reference/barray_to_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the edgelist of a barry_graph — barray_to_edgelist","text":"matrix two columns, first one source second one target.","code":""},{"path":"/reference/count_imaginary_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes census of imaginary errors — count_imaginary_census","title":"Computes census of imaginary errors — count_imaginary_census","text":"Computes census imaginary errors","code":""},{"path":"/reference/count_imaginary_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes census of imaginary errors — count_imaginary_census","text":"","code":"count_imaginary_census(x, counter_type = 0L)"},{"path":"/reference/count_imaginary_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes census of imaginary errors — count_imaginary_census","text":"x object class barry_graph. counter_type integer indicating type census compute (see details).","code":""},{"path":"/reference/count_imaginary_census.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes census of imaginary errors — count_imaginary_census","text":"can also separate counts function whether perceiver looking ties, ties including , ties including . controlled counter_type argument: 0: ties 1: ties including perceiver 2: ties including perceiver ten (10) values: (01) Accurate null (02) Partial false positive (null) (03) Complete false positive (null) (04) Partial false negative (assym) (05) Accurate assym (06) Mixed assym (07) Partial false positive (assym) (08) Complete false negative (full) (09) Partial false negative (full) (10) Accurate full","code":""},{"path":"/reference/count_recip_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a counter for reciprocity errors — count_recip_errors","title":"Add a counter for reciprocity errors — count_recip_errors","text":"Add counter reciprocity errors","code":""},{"path":"/reference/count_recip_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a counter for reciprocity errors — count_recip_errors","text":"","code":"count_recip_errors(x, counter_type = 0L)"},{"path":"/reference/count_recip_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a counter for reciprocity errors — count_recip_errors","text":"x object class barry_graph. counter_type integer indicating type census compute (see details).","code":""},{"path":"/reference/count_recip_errors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a counter for reciprocity errors — count_recip_errors","text":"can also separate counts function whether perceiver looking ties, ties including , ties including . controlled counter_type argument: 0: ties 1: ties including perceiver 2: ties including perceiver","code":""},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty — hello","title":"Empty — hello","text":"Empty","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty — hello","text":"","code":"hello()"},{"path":"/reference/new_barry_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary Array Graph — new_barry_graph","title":"Binary Array Graph — new_barry_graph","text":"Binary Array Graph","code":""},{"path":"/reference/new_barry_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary Array Graph — new_barry_graph","text":"","code":"new_barry_graph(x, ...)  # S3 method for matrix new_barry_graph(x, n, ...)  # S3 method for list new_barry_graph(x, ...)"},{"path":"/reference/new_barry_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary Array Graph — new_barry_graph","text":"x Either matrix list matrices. ... Currently ignored. n Integer. size original network.","code":""},{"path":"/reference/new_barry_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binary Array Graph — new_barry_graph","text":"x matrix, assumed block diagonal matrix, first block corresponding reference (true) network. x list, first matrix assumed reference (true) network.","code":""},{"path":"/reference/print.barry_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Barry Graph — print.barry_graph","title":"Print Barry Graph — print.barry_graph","text":"Print method barry_graph objects.","code":""},{"path":"/reference/print.barry_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Barry Graph — print.barry_graph","text":"","code":"# S3 method for barry_graph print(x, ...)"},{"path":"/reference/print.barry_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Barry Graph — print.barry_graph","text":"x barry_graph object. ... Additional arguments passed print (currently ignored).","code":""},{"path":"/reference/print.barry_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Barry Graph — print.barry_graph","text":"Invisibly returns input object. Called side effect printing.","code":""},{"path":"/reference/tie_level_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Null distribution for Cognitive Imaginary Structures — tie_level_accuracy","title":"Null distribution for Cognitive Imaginary Structures — tie_level_accuracy","text":"functions can used generate null distributions testing prevalence imaginary CSS. null function individual level accuracy rates, words. Pr(perceives one| one) Pr(perceives zero| zero).","code":""},{"path":"/reference/tie_level_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null distribution for Cognitive Imaginary Structures — tie_level_accuracy","text":"","code":"tie_level_accuracy(graph, which_nets = NULL)  sample_css_network(   graph,   prob = tie_level_accuracy(graph),   i = 1L:attr(graph, \"netsize\"),   keep_baseline = TRUE )"},{"path":"/reference/tie_level_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Null distribution for Cognitive Imaginary Structures — tie_level_accuracy","text":"graph barry_graph object. which_nets Integer vector. networks sample . prob numeric vector length 4L data frame (see details). Integer vector. network sample . keep_baseline Logical scalar. TRUE, function returns baseline network first element list.","code":""},{"path":"/reference/tie_level_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Null distribution for Cognitive Imaginary Structures — tie_level_accuracy","text":"function tie_level_accuracy returns data frame following columns: k: perceiver id. p_0_ego: probability tie perceiver (ego) alter. p_1_ego: probability tie perceiver alter. p_0_alter: probability tie two alters. p_1_alter: probability tie two alters. function sample_css_network returns list square matrices size attr(graph, \"netsize\"). keep_baseline = TRUE, first element list baseline network. Otherwise, returned.","code":""},{"path":"/reference/tie_level_accuracy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Null distribution for Cognitive Imaginary Structures — tie_level_accuracy","text":"two special cases worth mentioning. First, dyads question present probability true negative set NA. hand, dyads question null, probability true positive NA well. affect sample_css_network function probabilities unsed since tie/tie probabilities according baseline graph, meaning , instance, fully connected network never use p_0_ego p_0_alter probabilities empty network never use p_1_ego p_1_alter probabilities. function sample_css_network samples perceived networks baseline network. baseline network first network graph object. function tie_level_accuracy can used generate probability vector. probability vector numeric vector length 4L. first two elements probability tie/tie ego alter. third fourth elements probability tie/tie two alters. prob data frame, function sample row data frame (returned function tie_level_accuracy).","code":""},{"path":"/reference/tie_level_accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Null distribution for Cognitive Imaginary Structures — tie_level_accuracy","text":"","code":"if (FALSE) { taccuracy <- tie_level_accuracy(graph) boxplot(taccuracy[,-1]) }"},{"path":"/reference/to_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Integer — to_integer","title":"Convert to Integer — to_integer","text":"Converts input integer preserving dimensions checking non-integer values.","code":""},{"path":"/reference/to_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Integer — to_integer","text":"","code":"to_integer(x)"},{"path":"/reference/to_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Integer — to_integer","text":"x Numeric vector matrix convert integer.","code":""},{"path":"/reference/to_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Integer — to_integer","text":"Integer vector matrix dimensions input.","code":""},{"path":"/reference/to_integer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to Integer — to_integer","text":"function checks values input integers (within machine precision) converting. values integers, error thrown. matrices, dimension attribute preserved.","code":""},{"path":"/reference/to_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to Integer — to_integer","text":"","code":"if (FALSE) { to_integer(c(1, 2, 3)) to_integer(matrix(1:6, nrow = 2)) }"}]

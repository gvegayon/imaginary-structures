// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// new_barry_graph
SEXP new_barry_graph(int n, std::vector< uint > source, std::vector< uint > target);
RcppExport SEXP _imaginarycss_new_barry_graph(SEXP nSEXP, SEXP sourceSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector< uint > >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< std::vector< uint > >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(new_barry_graph(n, source, target));
    return rcpp_result_gen;
END_RCPP
}
// print_barry_graph
int print_barry_graph(SEXP x);
RcppExport SEXP _imaginarycss_print_barry_graph(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(print_barry_graph(x));
    return rcpp_result_gen;
END_RCPP
}
// count_recip_errors
std::vector< double > count_recip_errors(SEXP x, int n, std::vector< uint > start);
RcppExport SEXP _imaginarycss_count_recip_errors(SEXP xSEXP, SEXP nSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector< uint > >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(count_recip_errors(x, n, start));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_imaginarycss_new_barry_graph", (DL_FUNC) &_imaginarycss_new_barry_graph, 3},
    {"_imaginarycss_print_barry_graph", (DL_FUNC) &_imaginarycss_print_barry_graph, 1},
    {"_imaginarycss_count_recip_errors", (DL_FUNC) &_imaginarycss_count_recip_errors, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_imaginarycss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
